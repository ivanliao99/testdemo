// ==UserScript==
// @name         get imgs
// @namespace    https://google.com/
// @version      0.1.0
// @description  get imgs
// @author       none
// @run-at       document-idle
// @match        https://www.baidu.com/*
// @match        *://juejin.cn/post/*
// @match        http://www.netbian.com/*
// @match        https://www.4khd.com/*
// @grant        GM_xmlhttpRequest
// @require      https://raw.githubusercontent.com/ivanliao99/testdemo/master/employee-service/get-infos-by-site.js
// ==/UserScript==

const UPLOAD_ADDR = "http://192.168.1.104:7777/upload";

let isMouseDown = false;
let longPressTimeout;

function uploadImage(base64, folderRoot, folder, filename, idx) {
    // 假设我们已经有了一个 Blob 对象，它代表了图片数据


    // 创建 FormData 对象
    const formData = new FormData();
    formData.append('image', base64); // 第三个参数是文件名
    console.log(base64)
    formData.append('folderRoot', folderRoot)
    console.log(folderRoot)
    formData.append('folder', folder);
    console.log(folder)
    formData.append('filename', filename);
    console.log(filename)
    formData.append('idx', idx);


    GM_xmlhttpRequest({
        method: 'POST',
        url: UPLOAD_ADDR,
        data: formData, // 直接将 FormData 作为 data 传递
        /*headers: { // 设置 Content-Type 为 multipart/form-data
            'Content-Type': undefined // GM_xmlhttpRequest 会自动处理 FormData 的 Content-Type
        },*/
        onload: function (response) {
            console.log('Response:', response.responseText);
            //alert(response)
        },
        onerror: function (error) {
            console.error('Error:', error);
            //alert(error)
        }
    });

    return
    // 创建 XMLHttpRequest 实例
    const xhr = new XMLHttpRequest();
    // 设置请求的 URL 和类型
    xhr.open('POST', UPLOAD_ADDR, true);

    // 设置请求头，告诉服务器我们将发送一个 Blob
    //xhr.setRequestHeader('Content-Type', 'multipart/form-data');

    // 设置响应处理函数
    xhr.onload = function () {
        if (xhr.status === 200) {
            //console.log('Image uploaded successfully.');
            //console.log('Server response:', xhr.responseText);
        } else {
            console.log(filename)
            console.error('Failed to upload image. Status:', xhr.status);
        }
    };

    // 发送 FormData
    xhr.send(formData);
}

// upload
function handleLongPress() {
    //var imgs = document.getElementsByTagName("img")
    //console.log("Long press detected!", imgs.length);

    //var folder = "D:\\liaoyj\\test\\"
    //var ext2 = getImageExtension(imgs[0].src)
    var obj = getInfosBySite()
    var imgs = obj.imgs
    var folderRoot = obj.folderRoot
    var folder = obj.folder

    console.log("imgs:", imgs.length);
    document.getElementsByTagName("body")[0].style = "opacity:0.2;transition: opacity .5s ease-in-out;"
    setTimeout(() => { document.getElementsByTagName("body")[0].style = "opacity:1;transition: opacity .5s ease-in-out;" }, 500)


    setTimeout(() => {
        for (var i = 0; i < imgs.length; i++) {
            (function (i) {
                setTimeout(() => {
                    //console.log(i,imgs[i].src);
                    var img = imgs[i];
                    var ext = getImageExtension(img.src);
                    var fname = getFileNameAndExtension(img.src)

                    getImageBase64(img.src) // 替换为实际图片URL
                        .then(base64 => {

                            uploadImage(base64, folderRoot, folder, fname, i);
                        })
                        .catch(error => {
                            console.error("Error:", error);
                        });
                }, i * 100);
            })(i);
        }
    }, 1000)
    // 清除计时器，防止重复触发
    clearTimeout(longPressTimeout);
}


// start assistant
function getImageExtension(url) {
    // 去掉URL片段部分（#号后面的内容）
    const urlWithoutFragment = url.split('#')[0];

    // 去掉URL参数部分（?号后面的内容）
    const urlWithoutParams = urlWithoutFragment.split('?')[0];

    // 提取文件的后缀名
    const extension = urlWithoutParams.split('.').pop();

    // 检查提取的内容是否是一个合理的后缀名（长度应小于5，且只包含字母）
    if (extension.length > 0 && extension.length <= 5 && /^[a-zA-Z]+$/.test(extension)) {
        return extension;
    } else {
        return ''; // 返回空字符串表示没有找到有效的后缀名
    }
}
function getFileNameAndExtension(url) {
    // 去掉URL片段部分（#号后面的内容）
    const urlWithoutFragment = url.split('#')[0];

    // 去掉URL参数部分（?号后面的内容）
    const urlWithoutParams = urlWithoutFragment.split('?')[0];

    // 提取文件名和后缀名部分
    const parts = urlWithoutParams.split('/');
    const fileNameWithExtension = parts.pop();

    // 拆分文件名和后缀名
    const fileNameParts = fileNameWithExtension.split('.');
    const extension = fileNameParts.pop(); // 获取后缀名
    const fileName = fileNameParts.join('.'); // 获取文件名

    // 检查提取的内容是否是一个合理的后缀名（长度应小于5，且只包含字母）
    if (extension.length > 0 && extension.length <= 8 && /^[a-zA-Z]+$/.test(extension)) {
        return fileName + '.' + extension;
    } else {
        return ""; // 返回空字符串表示没有找到有效的后缀名
    }
}
function arrayBufferToBase64(buffer) {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
}
function getImageBase64(url) {
    return new Promise((resolve, reject) => {
        GM_xmlhttpRequest({
            method: "GET",
            url: url,
            responseType: "arraybuffer", // 以ArrayBuffer格式接收响应
            onload: function (response) {
                try {
                    const base64 = arrayBufferToBase64(response.response);

                    resolve(base64);
                } catch (error) {
                    reject("Failed to convert image to Base64: " + error.message);
                }
            },
            onerror: function (error) {
                reject("Request failed: " + error.message);
            }
        });
    });
}
function handleMouseDown() {
    // 设置一个计时器，如果持续时间超过一定阈值，则触发长按事件
    longPressTimeout = setTimeout(handleLongPress, 600); // 500毫秒后触发长按
    isMouseDown = true;
}
function handleMouseUp() {
    // 清除计时器，防止触发长按
    clearTimeout(longPressTimeout);
    isMouseDown = false;
}
// end assistant

(function () {
    'use strict';

    /*getImageBase64("https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4ac64071a1594159b3cc08aa0909600b~tplv-73owjymdk6-jj-mark:0:0:0:0:q75.awebp?rk3s=f64ab15b&x-expires=1724290949&x-signature=bNwjUDy%2FbgcTjQVVLiMUFIKm%2B8g%3D") // 替换为实际图片URL
        .then(base64 => {
        console.log("Base64 Data:", base64);
    })
    .catch(error => {
        console.error("Error:", error);
    });*/

    // 添加事件监听器
    window.addEventListener('mousedown', handleMouseDown);
    window.addEventListener('mouseup', handleMouseUp);

    // 为了兼容移动设备，还可以监听 touchstart 和 touchend 事件
    window.addEventListener('touchstart', handleMouseDown);
    window.addEventListener('touchend', handleMouseUp);

})();
